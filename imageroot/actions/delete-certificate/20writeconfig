#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import cert_helpers
import agent
import datetime

def main():
    tstart = datetime.datetime.now(datetime.UTC)
    request = json.load(sys.stdin)
    fqdn = request['fqdn']
    changed_dns_names = {fqdn}
    if request['type'] == 'custom':
        if fqdn in cert_helpers.read_custom_cert_names():
            old_names = cert_helpers.remove_custom_cert(fqdn)
            changed_dns_names.update(set(old_names))
        else:
            exit_certificate_not_found_error(fqdn)
    elif request['type'] == 'internal':
        cur_names = cert_helpers.read_default_cert_names()
        if not fqdn in cur_names:
            exit_certificate_not_found_error(fqdn)
        changed_dns_names.update(set(cur_names))
        new_names = list(filter(lambda x: x != fqdn, cur_names))
        if len(new_names) == 0:
            cert_helpers.remove_default_certificate_name(fqdn)
        elif cert_helpers.validate_certificate_names(main=new_names[0], sans=new_names[1:], timeout=request.get('sync_timeout', 30)):
            cert_helpers.remove_default_certificate_name(fqdn)
        else:
            acme_error = cert_helpers.traefik_last_acme_error_since(tstart)
            for errline in acme_error.split("\n"):
                print(agent.SD_ERR + errline, file=sys.stderr)
            json.dump(False, fp=sys.stdout)
            sys.exit(3)
    notify_certificate_changed_event(changed_dns_names)
    json.dump(True, fp=sys.stdout)

def exit_certificate_not_found_error(fqdn):
    agent.set_status('validation-failed')
    json.dump([{'field': 'fqdn','parameter':'fqdn','value': fqdn,'error':'certificate_not_found'}], fp=sys.stdout)
    sys.exit(2)

def notify_certificate_changed_event(changed_dns_names):
    rdb = agent.redis_connect(privileged=True)
    rdb.publish(f"{os.environ['AGENT_ID']}/event/certificate-changed", json.dumps({
        "node_id": int(os.environ['NODE_ID']),
        "module_id": os.environ['MODULE_ID'],
        "names": list(changed_dns_names),
    }))

if __name__ == "__main__":
    main()
