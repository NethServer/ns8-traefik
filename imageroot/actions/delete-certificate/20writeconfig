#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import cert_helpers
import agent
import datetime

def main():
    request = json.load(sys.stdin)
    if request['type'] == 'custom':
        old_names = cert_helpers.remove_custom_cert_by_path(request['path'])
        if not old_names:
            exit_certificate_not_found_error('path', request['path'])
    elif request['type'] == 'internal':
        old_names = cert_helpers.purge_acme_json_and_restart_traefik(purge_serial=request['serial'])
        if old_names:
            cert_helpers.clear_certresolver_in_http_routes(old_names)
        else:
            exit_certificate_not_found_error('serial', request['serial'])
    json.dump({"certificate_names": list(old_names)}, fp=sys.stdout)

def exit_certificate_not_found_error(parameter, value):
    agent.set_status('validation-failed')
    json.dump([{'field': parameter,'parameter': parameter,'value': value,'error':'certificate_not_found'}], fp=sys.stdout)
    sys.exit(2)

if __name__ == "__main__":
    main()
