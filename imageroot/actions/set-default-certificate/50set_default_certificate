#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import agent
import cert_helpers
import datetime

def main():
    request = json.load(sys.stdin)
    new_cert_names = list(map(str.lower, request['names']))
    http_route_names = cert_helpers.read_names_of_automatic_http_routes()
    if request.get('check_routes', True) and http_route_names.intersection(set(new_cert_names)):
        agent.set_status('validation-failed')
        json.dump([{'field':'names','parameter':'names','value': request['names'],'error':'name_route_conflict'}], fp=sys.stdout)
        sys.exit(2)
    obtained, acme_error = cert_helpers.request_new_default_certificate(new_cert_names=new_cert_names, merge_names=request.get('merge', False), sync_timeout=request.get('sync_timeout', 60))
    if not obtained:
        for errline in acme_error.split('\n'):
            print(agent.SD_ERR + errline, file=sys.stderr)
        agent.set_status('validation-failed')
        json.dump([{'field':'names', 'parameter':'names', 'value':request['names'], 'error':'newcert_acme_error', 'details':acme_error}], fp=sys.stdout)
        exit(3)

if __name__ == "__main__":
    main()
